const CLIENT_ID = window.APP_CONFIG ? window.APP_CONFIG.SPOTIFY_CLIENT_ID : '';
const CLIENT_SECRET = window.APP_CONFIG ? window.APP_CONFIG.SPOTIFY_CLIENT_SECRET : '';
const BASE_API_URL = 'https://api.spotify.com/v1';
let accessToken = '';
let currentPage = 1;
const itemsPerPage = 8;

async function getAccessToken() {
    const response = await fetch('https://accounts.spotify.com/api/token', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            Authorization: 'Basic ' + btoa(CLIENT_ID + ':' + CLIENT_SECRET)
        },
        body: 'grant_type=client_credentials'
    });
    const data = await response.json();
    accessToken = data.access_token;
}

async function fetchSpotifyData(endpoint, params = {}) {
    if (!accessToken) await getAccessToken();
    const url = new URL(`${BASE_API_URL}/${endpoint}`);
    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));
    const response = await fetch(url, {
        headers: { Authorization: `Bearer ${accessToken}` }
    });
    return response.json();
}

// Mock data for genres and charts
const mockData = {
    pop: { playlists: { items: Array(20).fill().map((_, i) => ({
        id: `pop${i}`, name: `Pop Playlist ${i+1}`, description: 'Pop hits', images: [{ url: 'https://images.pexels.com/photos/167636/pexels-photo-167636.jpeg' }]
    })) } },
    'hip-hop': { playlists: { items: Array(20).fill().map((_, i) => ({
        id: `hiphop${i}`, name: `Hip-Hop Playlist ${i+1}`, description: 'Rap vibes', images: [{ url: 'https://images.pexels.com/photos/96380/pexels-photo-96380.jpeg' }]
    })) } },
    rock: { playlists: { items: Array(20).fill().map((_, i) => ({
        id: `rock${i}`, name: `Rock Playlist ${i+1}`, description: 'Rock anthems', images: [{ url: 'https://images.pexels.com/photos/210922/pexels-photo-210922.jpeg' }]
    })) } },
    electronic: { playlists: { items: Array(20).fill().map((_, i) => ({
        id: `electronic${i}`, name: `Electronic Playlist ${i+1}`, description: 'EDM beats', images: [{ url: 'https://images.pexels.com/photos/167636/pexels-photo-167636.jpeg' }]
    })) } },
    charts: { tracks: { items: Array(20).fill().map((_, i) => ({
        id: `chart${i}`, name: `Top Song ${i+1}`, artists: [{ name: `Artist ${i+1}` }], album: { images: [{ url: 'https://images.pexels.com/photos/96380/pexels-photo-96380.jpeg' }] }
    })) } }
};

async function fetchPlaylists(genre = '', page = 1, searchQuery = '') {
    const spinner = document.querySelector('.spinner');
    const errorMessage = document.querySelector('.error-message');
    spinner.classList.add('active');
    errorMessage.classList.remove('active');

    try {
        let data;
        if (genre in mockData) {
            data = mockData[genre];
        } else {
            data = await fetchSpotifyData('browse/featured-playlists', { limit: itemsPerPage, offset: (page - 1) * itemsPerPage });
        }
        const playlists = data.playlists.items.filter(item => !searchQuery || item.name.toLowerCase().includes(searchQuery.toLowerCase()));
        return { playlists: playlists.slice((page - 1) * itemsPerPage, page * itemsPerPage), total: playlists.length };
    } catch (error) {
        errorMessage.textContent = 'Failed to load playlists. Please try again.';
        errorMessage.classList.add('active');
        return { playlists: [], total: 0 };
    } finally {
        spinner.classList.remove('active');
    }
}

async function fetchGenreTracks(genre, page = 1) {
    const spinner = document.querySelector('.infinite-spinner');
    spinner.classList.add('active');
    try {
        const data = mockData[genre] || await fetchSpotifyData(`search`, { q: `genre:${genre}`, type: 'playlist', limit: itemsPerPage, offset: (page - 1) * itemsPerPage });
        return { items: data.playlists.items, total: data.playlists.total || 20 };
    } catch (error) {
        console.error('Error fetching genre tracks:', error);
        return { items: [], total: 0 };
    } finally {
        spinner.classList.remove('active');
    }
}

async function fetchCharts(page = 1) {
    const spinner = document.querySelector('.infinite-spinner');
    spinner.classList.add('active');
    try {
        const data = mockData.charts || await fetchSpotifyData('playlists/37i9dQZEVXbMDoHDwVN2tF/tracks', { limit: itemsPerPage, offset: (page - 1) * itemsPerPage });
        return { items: data.tracks.items, total: data.tracks.total || 20 };
    } catch (error) {
        console.error('Error fetching charts:', error);
        return { items: [], total: 0 };
    } finally {
        spinner.classList.remove('active');
    }
}

function renderPlaylists(playlists, container, isInfinite = false) {
    if (!isInfinite) container.innerHTML = '';
    playlists.forEach(playlist => {
        const card = document.createElement('article');
        card.classList.add('spotify-card');
        card.innerHTML = `
            <img src="${playlist.images[0]?.url || 'https://images.pexels.com/photos/167636/pexels-photo-167636.jpeg'}" alt="${playlist.name}" loading="lazy" data-src="${playlist.images[0]?.url}">
            <div class="card-details">
                <h3>${playlist.name}</h3>
                <p>${playlist.description || 'No description'}</p>
                <a href="${playlist.external_urls?.spotify || '#'}" class="listen-now" target="_blank">Listen Now</a>
                <button class="play-preview">Play Preview</button>
                <div class="card-actions">
                    <button class="share-button" data-share="twitter" data-title="${playlist.name}">Share on Twitter</button>
                    <button class="share-button" data-share="tiktok" data-title="${playlist.name}">Share on TikTok</button>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
}

function renderTracks(tracks, container, isInfinite = false) {
    if (!isInfinite) container.innerHTML = '';
    tracks.forEach(track => {
        const card = document.createElement('article');
        card.classList.add('genre-card', 'billboard-card');
        card.innerHTML = `
            <img src="${track.album?.images[0]?.url || 'https://images.pexels.com/photos/96380/pexels-photo-96380.jpeg'}" alt="${track.name}" loading="lazy" data-src="${track.album?.images[0]?.url}">
            <div class="card-details">
                <h3>${track.name}</h3>
                <p>Artist: ${track.artists[0]?.name || 'Unknown'}</p>
                <a href="${track.external_urls?.spotify || '#'}" class="listen-now" target="_blank">Listen Now</a>
                <div class="card-actions">
                    <button class="share-button" data-share="twitter" data-title="${track.name}">Share on Twitter</button>
                    <button class="share-button" data-share="tiktok" data-title="${track.name}">Share on TikTok</button>
                </div>
            </div>
        `;
        container.appendChild(card);
    });
}